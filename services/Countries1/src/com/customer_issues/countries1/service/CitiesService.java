/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.countries1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.countries1.Cities;

/**
 * Service object for domain model class {@link Cities}.
 */
public interface CitiesService {

    /**
     * Creates a new Cities. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cities if any.
     *
     * @param cities Details of the Cities to be created; value cannot be null.
     * @return The newly created Cities.
     */
    Cities create(@Valid Cities cities);


	/**
     * Returns Cities by given id if exists.
     *
     * @param citiesId The id of the Cities to get; value cannot be null.
     * @return Cities associated with the given citiesId.
	 * @throws EntityNotFoundException If no Cities is found.
     */
    Cities getById(Integer citiesId);

    /**
     * Find and return the Cities by given id if exists, returns null otherwise.
     *
     * @param citiesId The id of the Cities to get; value cannot be null.
     * @return Cities associated with the given citiesId.
     */
    Cities findById(Integer citiesId);

	/**
     * Find and return the list of Cities by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param citiesIds The id's of the Cities to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Cities associated with the given citiesIds.
     */
    List<Cities> findByMultipleIds(List<Integer> citiesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Cities. It replaces all fields of the existing Cities with the given cities.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cities if any.
     *
     * @param cities The details of the Cities to be updated; value cannot be null.
     * @return The updated Cities.
     * @throws EntityNotFoundException if no Cities is found with given input.
     */
    Cities update(@Valid Cities cities);


    /**
     * Partially updates the details of an existing Cities. It updates only the
     * fields of the existing Cities which are passed in the citiesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cities if any.
     *
     * @param citiesId The id of the Cities to be deleted; value cannot be null.
     * @param citiesPatch The partial data of Cities which is supposed to be updated; value cannot be null.
     * @return The updated Cities.
     * @throws EntityNotFoundException if no Cities is found with given input.
     */
    Cities partialUpdate(Integer citiesId, Map<String, Object> citiesPatch);

    /**
     * Deletes an existing Cities with the given id.
     *
     * @param citiesId The id of the Cities to be deleted; value cannot be null.
     * @return The deleted Cities.
     * @throws EntityNotFoundException if no Cities found with the given id.
     */
    Cities delete(Integer citiesId);

    /**
     * Deletes an existing Cities with the given object.
     *
     * @param cities The instance of the Cities to be deleted; value cannot be null.
     */
    void delete(Cities cities);

    /**
     * Find all Cities matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Cities.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Cities> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Cities matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Cities.
     *
     * @see Pageable
     * @see Page
     */
    Page<Cities> findAll(String query, Pageable pageable);

    /**
     * Exports all Cities matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Cities matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Cities in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Cities.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}