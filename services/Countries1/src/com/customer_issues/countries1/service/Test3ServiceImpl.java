/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.countries1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.countries1.Test3;


/**
 * ServiceImpl object for domain model class Test3.
 *
 * @see Test3
 */
@Service("Countries1.Test3Service")
@Validated
public class Test3ServiceImpl implements Test3Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Test3ServiceImpl.class);


    @Autowired
    @Qualifier("Countries1.Test3Dao")
    private WMGenericDao<Test3, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Test3, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Countries1TransactionManager")
    @Override
    public Test3 create(Test3 test3) {
        LOGGER.debug("Creating a new Test3 with information: {}", test3);

        Test3 test3Created = this.wmGenericDao.create(test3);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(test3Created);
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager")
    @Override
    public Test3 getById(Integer test3Id) {
        LOGGER.debug("Finding Test3 by id: {}", test3Id);
        return this.wmGenericDao.findById(test3Id);
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager")
    @Override
    public Test3 findById(Integer test3Id) {
        LOGGER.debug("Finding Test3 by id: {}", test3Id);
        try {
            return this.wmGenericDao.findById(test3Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Test3 found with id: {}", test3Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager")
    @Override
    public List<Test3> findByMultipleIds(List<Integer> test3Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Test3s by ids: {}", test3Ids);

        return this.wmGenericDao.findByMultipleIds(test3Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Countries1TransactionManager")
    @Override
    public Test3 update(Test3 test3) {
        LOGGER.debug("Updating Test3 with information: {}", test3);

        this.wmGenericDao.update(test3);
        this.wmGenericDao.refresh(test3);

        return test3;
    }

    @Transactional(value = "Countries1TransactionManager")
    @Override
    public Test3 partialUpdate(Integer test3Id, Map<String, Object>test3Patch) {
        LOGGER.debug("Partially Updating the Test3 with id: {}", test3Id);

        Test3 test3 = getById(test3Id);

        try {
            ObjectReader test3Reader = this.objectMapper.reader().forType(Test3.class).withValueToUpdate(test3);
            test3 = test3Reader.readValue(this.objectMapper.writeValueAsString(test3Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", test3Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        test3 = update(test3);

        return test3;
    }

    @Transactional(value = "Countries1TransactionManager")
    @Override
    public Test3 delete(Integer test3Id) {
        LOGGER.debug("Deleting Test3 with id: {}", test3Id);
        Test3 deleted = this.wmGenericDao.findById(test3Id);
        if (deleted == null) {
            LOGGER.debug("No Test3 found with id: {}", test3Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Test3.class.getSimpleName(), test3Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "Countries1TransactionManager")
    @Override
    public void delete(Test3 test3) {
        LOGGER.debug("Deleting Test3 with {}", test3);
        this.wmGenericDao.delete(test3);
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager")
    @Override
    public Page<Test3> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Test3s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager")
    @Override
    public Page<Test3> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Test3s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Countries1 for table Test3 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service Countries1 for table Test3 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Countries1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}