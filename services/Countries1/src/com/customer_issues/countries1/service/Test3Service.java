/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.countries1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.countries1.Test3;

/**
 * Service object for domain model class {@link Test3}.
 */
public interface Test3Service {

    /**
     * Creates a new Test3. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Test3 if any.
     *
     * @param test3 Details of the Test3 to be created; value cannot be null.
     * @return The newly created Test3.
     */
    Test3 create(@Valid Test3 test3);


	/**
     * Returns Test3 by given id if exists.
     *
     * @param test3Id The id of the Test3 to get; value cannot be null.
     * @return Test3 associated with the given test3Id.
	 * @throws EntityNotFoundException If no Test3 is found.
     */
    Test3 getById(Integer test3Id);

    /**
     * Find and return the Test3 by given id if exists, returns null otherwise.
     *
     * @param test3Id The id of the Test3 to get; value cannot be null.
     * @return Test3 associated with the given test3Id.
     */
    Test3 findById(Integer test3Id);

	/**
     * Find and return the list of Test3s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param test3Ids The id's of the Test3 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Test3s associated with the given test3Ids.
     */
    List<Test3> findByMultipleIds(List<Integer> test3Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing Test3. It replaces all fields of the existing Test3 with the given test3.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Test3 if any.
     *
     * @param test3 The details of the Test3 to be updated; value cannot be null.
     * @return The updated Test3.
     * @throws EntityNotFoundException if no Test3 is found with given input.
     */
    Test3 update(@Valid Test3 test3);


    /**
     * Partially updates the details of an existing Test3. It updates only the
     * fields of the existing Test3 which are passed in the test3Patch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Test3 if any.
     *
     * @param test3Id The id of the Test3 to be deleted; value cannot be null.
     * @param test3Patch The partial data of Test3 which is supposed to be updated; value cannot be null.
     * @return The updated Test3.
     * @throws EntityNotFoundException if no Test3 is found with given input.
     */
    Test3 partialUpdate(Integer test3Id, Map<String, Object> test3Patch);

    /**
     * Deletes an existing Test3 with the given id.
     *
     * @param test3Id The id of the Test3 to be deleted; value cannot be null.
     * @return The deleted Test3.
     * @throws EntityNotFoundException if no Test3 found with the given id.
     */
    Test3 delete(Integer test3Id);

    /**
     * Deletes an existing Test3 with the given object.
     *
     * @param test3 The instance of the Test3 to be deleted; value cannot be null.
     */
    void delete(Test3 test3);

    /**
     * Find all Test3s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Test3s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Test3> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Test3s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Test3s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Test3> findAll(String query, Pageable pageable);

    /**
     * Exports all Test3s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Test3s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Test3s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Test3.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}