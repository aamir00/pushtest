/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.customer_issues.tempdb.Temp1;
import com.customer_issues.tempdb.Temp2;
import com.customer_issues.tempdb.service.Temp1Service;


/**
 * Controller object for domain model class Temp1.
 * @see Temp1
 */
@RestController("TempDB.Temp1Controller")
@Api(value = "Temp1Controller", description = "Exposes APIs to work with Temp1 resource.")
@RequestMapping("/TempDB/Temp1")
public class Temp1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Temp1Controller.class);

    @Autowired
	@Qualifier("TempDB.Temp1Service")
	private Temp1Service temp1Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Temp1 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Temp1 createTemp1(@RequestBody Temp1 temp1) {
		LOGGER.debug("Create Temp1 with information: {}" , temp1);

		temp1 = temp1Service.create(temp1);
		LOGGER.debug("Created Temp1 with information: {}" , temp1);

	    return temp1;
	}

    @ApiOperation(value = "Returns the Temp1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Temp1 getTemp1(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Temp1 with id: {}" , id);

        Temp1 foundTemp1 = temp1Service.getById(id);
        LOGGER.debug("Temp1 details with id: {}" , foundTemp1);

        return foundTemp1;
    }

    @ApiOperation(value = "Updates the Temp1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Temp1 editTemp1(@PathVariable("id") Integer id, @RequestBody Temp1 temp1) {
        LOGGER.debug("Editing Temp1 with id: {}" , temp1.getId());

        temp1.setId(id);
        temp1 = temp1Service.update(temp1);
        LOGGER.debug("Temp1 details with id: {}" , temp1);

        return temp1;
    }
    
    @ApiOperation(value = "Partially updates the Temp1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Temp1 patchTemp1(@PathVariable("id") Integer id, @RequestBody @MapTo(Temp1.class) Map<String, Object> temp1Patch) {
        LOGGER.debug("Partially updating Temp1 with id: {}" , id);

        Temp1 temp1 = temp1Service.partialUpdate(id, temp1Patch);
        LOGGER.debug("Temp1 details after partial update: {}" , temp1);

        return temp1;
    }

    @ApiOperation(value = "Deletes the Temp1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTemp1(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Temp1 with id: {}" , id);

        Temp1 deletedTemp1 = temp1Service.delete(id);

        return deletedTemp1 != null;
    }

    /**
     * @deprecated Use {@link #findTemp1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Temp1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Temp1> searchTemp1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Temp1s list by query filter:{}", (Object) queryFilters);
        return temp1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Temp1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Temp1> findTemp1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Temp1s list by filter:", query);
        return temp1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Temp1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Temp1> filterTemp1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Temp1s list by filter", query);
        return temp1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportTemp1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return temp1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTemp1sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Temp1.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> temp1Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Temp1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countTemp1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Temp1s");
		return temp1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getTemp1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return temp1Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/temp2s", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the temp2s instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Temp2> findAssociatedTemp2s(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated temp2s");
        return temp1Service.findAssociatedTemp2s(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Temp1Service instance
	 */
	protected void setTemp1Service(Temp1Service service) {
		this.temp1Service = service;
	}

}