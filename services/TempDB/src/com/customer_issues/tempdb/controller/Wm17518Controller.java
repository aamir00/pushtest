/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.customer_issues.tempdb.Wm17518;
import com.customer_issues.tempdb.service.Wm17518Service;


/**
 * Controller object for domain model class Wm17518.
 * @see Wm17518
 */
@RestController("TempDB.Wm17518Controller")
@Api(value = "Wm17518Controller", description = "Exposes APIs to work with Wm17518 resource.")
@RequestMapping("/TempDB/Wm17518")
public class Wm17518Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Wm17518Controller.class);

    @Autowired
	@Qualifier("TempDB.Wm17518Service")
	private Wm17518Service wm17518Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Wm17518 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Wm17518 createWm17518(@RequestBody Wm17518 wm17518) {
		LOGGER.debug("Create Wm17518 with information: {}" , wm17518);

		wm17518 = wm17518Service.create(wm17518);
		LOGGER.debug("Created Wm17518 with information: {}" , wm17518);

	    return wm17518;
	}

    @ApiOperation(value = "Returns the Wm17518 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Wm17518 getWm17518(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Wm17518 with id: {}" , id);

        Wm17518 foundWm17518 = wm17518Service.getById(id);
        LOGGER.debug("Wm17518 details with id: {}" , foundWm17518);

        return foundWm17518;
    }

    @ApiOperation(value = "Updates the Wm17518 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Wm17518 editWm17518(@PathVariable("id") Integer id, @RequestBody Wm17518 wm17518) {
        LOGGER.debug("Editing Wm17518 with id: {}" , wm17518.getId());

        wm17518.setId(id);
        wm17518 = wm17518Service.update(wm17518);
        LOGGER.debug("Wm17518 details with id: {}" , wm17518);

        return wm17518;
    }
    
    @ApiOperation(value = "Partially updates the Wm17518 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Wm17518 patchWm17518(@PathVariable("id") Integer id, @RequestBody @MapTo(Wm17518.class) Map<String, Object> wm17518Patch) {
        LOGGER.debug("Partially updating Wm17518 with id: {}" , id);

        Wm17518 wm17518 = wm17518Service.partialUpdate(id, wm17518Patch);
        LOGGER.debug("Wm17518 details after partial update: {}" , wm17518);

        return wm17518;
    }

    @ApiOperation(value = "Deletes the Wm17518 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteWm17518(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Wm17518 with id: {}" , id);

        Wm17518 deletedWm17518 = wm17518Service.delete(id);

        return deletedWm17518 != null;
    }

    /**
     * @deprecated Use {@link #findWm17518s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Wm17518 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Wm17518> searchWm17518sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Wm17518s list by query filter:{}", (Object) queryFilters);
        return wm17518Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Wm17518 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Wm17518> findWm17518s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Wm17518s list by filter:", query);
        return wm17518Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Wm17518 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Wm17518> filterWm17518s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Wm17518s list by filter", query);
        return wm17518Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportWm17518s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return wm17518Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportWm17518sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Wm17518.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> wm17518Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Wm17518 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countWm17518s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Wm17518s");
		return wm17518Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getWm17518AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return wm17518Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Wm17518Service instance
	 */
	protected void setWm17518Service(Wm17518Service service) {
		this.wm17518Service = service;
	}

}