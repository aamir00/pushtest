/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.customer_issues.tempdb.TempTable;
import com.customer_issues.tempdb.service.TempTableService;


/**
 * Controller object for domain model class TempTable.
 * @see TempTable
 */
@RestController("TempDB.TempTableController")
@Api(value = "TempTableController", description = "Exposes APIs to work with TempTable resource.")
@RequestMapping("/TempDB/TempTable")
public class TempTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TempTableController.class);

    @Autowired
	@Qualifier("TempDB.TempTableService")
	private TempTableService tempTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TempTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempTable createTempTable(@RequestBody TempTable tempTable) {
		LOGGER.debug("Create TempTable with information: {}" , tempTable);

		tempTable = tempTableService.create(tempTable);
		LOGGER.debug("Created TempTable with information: {}" , tempTable);

	    return tempTable;
	}

    @ApiOperation(value = "Returns the TempTable instance associated with the given id.")
    @RequestMapping(value = "/{emailId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempTable getTempTable(@PathVariable("emailId") String emailId) {
        LOGGER.debug("Getting TempTable with id: {}" , emailId);

        TempTable foundTempTable = tempTableService.getById(emailId);
        LOGGER.debug("TempTable details with id: {}" , foundTempTable);

        return foundTempTable;
    }

    @ApiOperation(value = "Updates the TempTable instance associated with the given id.")
    @RequestMapping(value = "/{emailId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempTable editTempTable(@PathVariable("emailId") String emailId, @RequestBody TempTable tempTable) {
        LOGGER.debug("Editing TempTable with id: {}" , tempTable.getEmailId());

        tempTable.setEmailId(emailId);
        tempTable = tempTableService.update(tempTable);
        LOGGER.debug("TempTable details with id: {}" , tempTable);

        return tempTable;
    }
    
    @ApiOperation(value = "Partially updates the TempTable instance associated with the given id.")
    @RequestMapping(value = "/{emailId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempTable patchTempTable(@PathVariable("emailId") String emailId, @RequestBody @MapTo(TempTable.class) Map<String, Object> tempTablePatch) {
        LOGGER.debug("Partially updating TempTable with id: {}" , emailId);

        TempTable tempTable = tempTableService.partialUpdate(emailId, tempTablePatch);
        LOGGER.debug("TempTable details after partial update: {}" , tempTable);

        return tempTable;
    }

    @ApiOperation(value = "Deletes the TempTable instance associated with the given id.")
    @RequestMapping(value = "/{emailId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTempTable(@PathVariable("emailId") String emailId) {
        LOGGER.debug("Deleting TempTable with id: {}" , emailId);

        TempTable deletedTempTable = tempTableService.delete(emailId);

        return deletedTempTable != null;
    }

    /**
     * @deprecated Use {@link #findTempTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TempTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<TempTable> searchTempTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TempTables list by query filter:{}", (Object) queryFilters);
        return tempTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TempTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TempTable> findTempTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TempTables list by filter:", query);
        return tempTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TempTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<TempTable> filterTempTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TempTables list by filter", query);
        return tempTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportTempTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tempTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTempTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TempTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tempTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TempTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countTempTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TempTables");
		return tempTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getTempTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tempTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TempTableService instance
	 */
	protected void setTempTableService(TempTableService service) {
		this.tempTableService = service;
	}

}