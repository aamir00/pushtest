/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.customer_issues.tempdb.Temp2;
import com.customer_issues.tempdb.service.Temp2Service;


/**
 * Controller object for domain model class Temp2.
 * @see Temp2
 */
@RestController("TempDB.Temp2Controller")
@Api(value = "Temp2Controller", description = "Exposes APIs to work with Temp2 resource.")
@RequestMapping("/TempDB/Temp2")
public class Temp2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Temp2Controller.class);

    @Autowired
	@Qualifier("TempDB.Temp2Service")
	private Temp2Service temp2Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Temp2 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Temp2 createTemp2(@RequestBody Temp2 temp2) {
		LOGGER.debug("Create Temp2 with information: {}" , temp2);

		temp2 = temp2Service.create(temp2);
		LOGGER.debug("Created Temp2 with information: {}" , temp2);

	    return temp2;
	}

    @ApiOperation(value = "Returns the Temp2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Temp2 getTemp2(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Temp2 with id: {}" , id);

        Temp2 foundTemp2 = temp2Service.getById(id);
        LOGGER.debug("Temp2 details with id: {}" , foundTemp2);

        return foundTemp2;
    }

    @ApiOperation(value = "Updates the Temp2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Temp2 editTemp2(@PathVariable("id") Integer id, @RequestBody Temp2 temp2) {
        LOGGER.debug("Editing Temp2 with id: {}" , temp2.getId());

        temp2.setId(id);
        temp2 = temp2Service.update(temp2);
        LOGGER.debug("Temp2 details with id: {}" , temp2);

        return temp2;
    }
    
    @ApiOperation(value = "Partially updates the Temp2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Temp2 patchTemp2(@PathVariable("id") Integer id, @RequestBody @MapTo(Temp2.class) Map<String, Object> temp2Patch) {
        LOGGER.debug("Partially updating Temp2 with id: {}" , id);

        Temp2 temp2 = temp2Service.partialUpdate(id, temp2Patch);
        LOGGER.debug("Temp2 details after partial update: {}" , temp2);

        return temp2;
    }

    @ApiOperation(value = "Deletes the Temp2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTemp2(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Temp2 with id: {}" , id);

        Temp2 deletedTemp2 = temp2Service.delete(id);

        return deletedTemp2 != null;
    }

    /**
     * @deprecated Use {@link #findTemp2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Temp2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Temp2> searchTemp2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Temp2s list by query filter:{}", (Object) queryFilters);
        return temp2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Temp2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Temp2> findTemp2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Temp2s list by filter:", query);
        return temp2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Temp2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Temp2> filterTemp2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Temp2s list by filter", query);
        return temp2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportTemp2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return temp2Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTemp2sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Temp2.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> temp2Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Temp2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countTemp2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Temp2s");
		return temp2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getTemp2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return temp2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Temp2Service instance
	 */
	protected void setTemp2Service(Temp2Service service) {
		this.temp2Service = service;
	}

}