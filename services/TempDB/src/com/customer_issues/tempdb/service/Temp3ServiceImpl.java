/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Temp2;
import com.customer_issues.tempdb.Temp3;


/**
 * ServiceImpl object for domain model class Temp3.
 *
 * @see Temp3
 */
@Service("TempDB.Temp3Service")
@Validated
public class Temp3ServiceImpl implements Temp3Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Temp3ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TempDB.Temp2Service")
    private Temp2Service temp2Service;

    @Autowired
    @Qualifier("TempDB.Temp3Dao")
    private WMGenericDao<Temp3, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Temp3, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp3 create(Temp3 temp3) {
        LOGGER.debug("Creating a new Temp3 with information: {}", temp3);

        Temp3 temp3Created = this.wmGenericDao.create(temp3);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(temp3Created);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Temp3 getById(Integer temp3Id) {
        LOGGER.debug("Finding Temp3 by id: {}", temp3Id);
        return this.wmGenericDao.findById(temp3Id);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Temp3 findById(Integer temp3Id) {
        LOGGER.debug("Finding Temp3 by id: {}", temp3Id);
        try {
            return this.wmGenericDao.findById(temp3Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Temp3 found with id: {}", temp3Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<Temp3> findByMultipleIds(List<Integer> temp3Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Temp3s by ids: {}", temp3Ids);

        return this.wmGenericDao.findByMultipleIds(temp3Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public Temp3 update(Temp3 temp3) {
        LOGGER.debug("Updating Temp3 with information: {}", temp3);

        this.wmGenericDao.update(temp3);
        this.wmGenericDao.refresh(temp3);

        return temp3;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp3 partialUpdate(Integer temp3Id, Map<String, Object>temp3Patch) {
        LOGGER.debug("Partially Updating the Temp3 with id: {}", temp3Id);

        Temp3 temp3 = getById(temp3Id);

        try {
            ObjectReader temp3Reader = this.objectMapper.reader().forType(Temp3.class).withValueToUpdate(temp3);
            temp3 = temp3Reader.readValue(this.objectMapper.writeValueAsString(temp3Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", temp3Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        temp3 = update(temp3);

        return temp3;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp3 delete(Integer temp3Id) {
        LOGGER.debug("Deleting Temp3 with id: {}", temp3Id);
        Temp3 deleted = this.wmGenericDao.findById(temp3Id);
        if (deleted == null) {
            LOGGER.debug("No Temp3 found with id: {}", temp3Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Temp3.class.getSimpleName(), temp3Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(Temp3 temp3) {
        LOGGER.debug("Deleting Temp3 with {}", temp3);
        this.wmGenericDao.delete(temp3);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp3> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Temp3s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp3> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Temp3s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table Temp3 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table Temp3 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp2> findAssociatedTemp2s(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated temp2s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("temp3.id = '" + id + "'");

        return temp2Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Temp2Service instance
     */
    protected void setTemp2Service(Temp2Service service) {
        this.temp2Service = service;
    }

}