/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Temp;


/**
 * ServiceImpl object for domain model class Temp.
 *
 * @see Temp
 */
@Service("TempDB.TempService")
@Validated
public class TempServiceImpl implements TempService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TempServiceImpl.class);


    @Autowired
    @Qualifier("TempDB.TempDao")
    private WMGenericDao<Temp, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Temp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp create(Temp temp) {
        LOGGER.debug("Creating a new Temp with information: {}", temp);

        Temp tempCreated = this.wmGenericDao.create(temp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tempCreated);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Temp getById(Integer tempId) {
        LOGGER.debug("Finding Temp by id: {}", tempId);
        return this.wmGenericDao.findById(tempId);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Temp findById(Integer tempId) {
        LOGGER.debug("Finding Temp by id: {}", tempId);
        try {
            return this.wmGenericDao.findById(tempId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Temp found with id: {}", tempId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<Temp> findByMultipleIds(List<Integer> tempIds, boolean orderedReturn) {
        LOGGER.debug("Finding Temps by ids: {}", tempIds);

        return this.wmGenericDao.findByMultipleIds(tempIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public Temp update(Temp temp) {
        LOGGER.debug("Updating Temp with information: {}", temp);

        this.wmGenericDao.update(temp);
        this.wmGenericDao.refresh(temp);

        return temp;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp partialUpdate(Integer tempId, Map<String, Object>tempPatch) {
        LOGGER.debug("Partially Updating the Temp with id: {}", tempId);

        Temp temp = getById(tempId);

        try {
            ObjectReader tempReader = this.objectMapper.reader().forType(Temp.class).withValueToUpdate(temp);
            temp = tempReader.readValue(this.objectMapper.writeValueAsString(tempPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", tempPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        temp = update(temp);

        return temp;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp delete(Integer tempId) {
        LOGGER.debug("Deleting Temp with id: {}", tempId);
        Temp deleted = this.wmGenericDao.findById(tempId);
        if (deleted == null) {
            LOGGER.debug("No Temp found with id: {}", tempId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Temp.class.getSimpleName(), tempId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(Temp temp) {
        LOGGER.debug("Deleting Temp with {}", temp);
        this.wmGenericDao.delete(temp);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Temps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Temps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table Temp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table Temp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}