/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Wm17518;

/**
 * Service object for domain model class {@link Wm17518}.
 */
public interface Wm17518Service {

    /**
     * Creates a new Wm17518. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Wm17518 if any.
     *
     * @param wm17518 Details of the Wm17518 to be created; value cannot be null.
     * @return The newly created Wm17518.
     */
    Wm17518 create(@Valid Wm17518 wm17518);


	/**
     * Returns Wm17518 by given id if exists.
     *
     * @param wm17518Id The id of the Wm17518 to get; value cannot be null.
     * @return Wm17518 associated with the given wm17518Id.
	 * @throws EntityNotFoundException If no Wm17518 is found.
     */
    Wm17518 getById(Integer wm17518Id);

    /**
     * Find and return the Wm17518 by given id if exists, returns null otherwise.
     *
     * @param wm17518Id The id of the Wm17518 to get; value cannot be null.
     * @return Wm17518 associated with the given wm17518Id.
     */
    Wm17518 findById(Integer wm17518Id);

	/**
     * Find and return the list of Wm17518s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param wm17518Ids The id's of the Wm17518 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Wm17518s associated with the given wm17518Ids.
     */
    List<Wm17518> findByMultipleIds(List<Integer> wm17518Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing Wm17518. It replaces all fields of the existing Wm17518 with the given wm17518.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Wm17518 if any.
     *
     * @param wm17518 The details of the Wm17518 to be updated; value cannot be null.
     * @return The updated Wm17518.
     * @throws EntityNotFoundException if no Wm17518 is found with given input.
     */
    Wm17518 update(@Valid Wm17518 wm17518);


    /**
     * Partially updates the details of an existing Wm17518. It updates only the
     * fields of the existing Wm17518 which are passed in the wm17518Patch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Wm17518 if any.
     *
     * @param wm17518Id The id of the Wm17518 to be deleted; value cannot be null.
     * @param wm17518Patch The partial data of Wm17518 which is supposed to be updated; value cannot be null.
     * @return The updated Wm17518.
     * @throws EntityNotFoundException if no Wm17518 is found with given input.
     */
    Wm17518 partialUpdate(Integer wm17518Id, Map<String, Object> wm17518Patch);

    /**
     * Deletes an existing Wm17518 with the given id.
     *
     * @param wm17518Id The id of the Wm17518 to be deleted; value cannot be null.
     * @return The deleted Wm17518.
     * @throws EntityNotFoundException if no Wm17518 found with the given id.
     */
    Wm17518 delete(Integer wm17518Id);

    /**
     * Deletes an existing Wm17518 with the given object.
     *
     * @param wm17518 The instance of the Wm17518 to be deleted; value cannot be null.
     */
    void delete(Wm17518 wm17518);

    /**
     * Find all Wm17518s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Wm17518s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Wm17518> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Wm17518s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Wm17518s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Wm17518> findAll(String query, Pageable pageable);

    /**
     * Exports all Wm17518s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Wm17518s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Wm17518s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Wm17518.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}