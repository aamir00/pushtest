/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Questions;


/**
 * ServiceImpl object for domain model class Questions.
 *
 * @see Questions
 */
@Service("TempDB.QuestionsService")
@Validated
public class QuestionsServiceImpl implements QuestionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(QuestionsServiceImpl.class);


    @Autowired
    @Qualifier("TempDB.QuestionsDao")
    private WMGenericDao<Questions, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Questions, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Questions create(Questions questions) {
        LOGGER.debug("Creating a new Questions with information: {}", questions);

        Questions questionsCreated = this.wmGenericDao.create(questions);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(questionsCreated);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Questions getById(Integer questionsId) {
        LOGGER.debug("Finding Questions by id: {}", questionsId);
        return this.wmGenericDao.findById(questionsId);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Questions findById(Integer questionsId) {
        LOGGER.debug("Finding Questions by id: {}", questionsId);
        try {
            return this.wmGenericDao.findById(questionsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Questions found with id: {}", questionsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<Questions> findByMultipleIds(List<Integer> questionsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Questions by ids: {}", questionsIds);

        return this.wmGenericDao.findByMultipleIds(questionsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public Questions update(Questions questions) {
        LOGGER.debug("Updating Questions with information: {}", questions);

        this.wmGenericDao.update(questions);
        this.wmGenericDao.refresh(questions);

        return questions;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Questions partialUpdate(Integer questionsId, Map<String, Object>questionsPatch) {
        LOGGER.debug("Partially Updating the Questions with id: {}", questionsId);

        Questions questions = getById(questionsId);

        try {
            ObjectReader questionsReader = this.objectMapper.reader().forType(Questions.class).withValueToUpdate(questions);
            questions = questionsReader.readValue(this.objectMapper.writeValueAsString(questionsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", questionsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        questions = update(questions);

        return questions;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Questions delete(Integer questionsId) {
        LOGGER.debug("Deleting Questions with id: {}", questionsId);
        Questions deleted = this.wmGenericDao.findById(questionsId);
        if (deleted == null) {
            LOGGER.debug("No Questions found with id: {}", questionsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Questions.class.getSimpleName(), questionsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(Questions questions) {
        LOGGER.debug("Deleting Questions with {}", questions);
        this.wmGenericDao.delete(questions);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Questions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Questions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Questions> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Questions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table Questions to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table Questions to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}