/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Test;


/**
 * ServiceImpl object for domain model class Test.
 *
 * @see Test
 */
@Service("TempDB.TestService")
@Validated
public class TestServiceImpl implements TestService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestServiceImpl.class);


    @Autowired
    @Qualifier("TempDB.TestDao")
    private WMGenericDao<Test, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Test, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Test create(Test test) {
        LOGGER.debug("Creating a new Test with information: {}", test);

        Test testCreated = this.wmGenericDao.create(test);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(testCreated);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Test getById(Integer testId) {
        LOGGER.debug("Finding Test by id: {}", testId);
        return this.wmGenericDao.findById(testId);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Test findById(Integer testId) {
        LOGGER.debug("Finding Test by id: {}", testId);
        try {
            return this.wmGenericDao.findById(testId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Test found with id: {}", testId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<Test> findByMultipleIds(List<Integer> testIds, boolean orderedReturn) {
        LOGGER.debug("Finding Tests by ids: {}", testIds);

        return this.wmGenericDao.findByMultipleIds(testIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public Test update(Test test) {
        LOGGER.debug("Updating Test with information: {}", test);

        this.wmGenericDao.update(test);
        this.wmGenericDao.refresh(test);

        return test;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Test partialUpdate(Integer testId, Map<String, Object>testPatch) {
        LOGGER.debug("Partially Updating the Test with id: {}", testId);

        Test test = getById(testId);

        try {
            ObjectReader testReader = this.objectMapper.reader().forType(Test.class).withValueToUpdate(test);
            test = testReader.readValue(this.objectMapper.writeValueAsString(testPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", testPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        test = update(test);

        return test;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Test delete(Integer testId) {
        LOGGER.debug("Deleting Test with id: {}", testId);
        Test deleted = this.wmGenericDao.findById(testId);
        if (deleted == null) {
            LOGGER.debug("No Test found with id: {}", testId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Test.class.getSimpleName(), testId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(Test test) {
        LOGGER.debug("Deleting Test with {}", test);
        this.wmGenericDao.delete(test);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Test> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Tests");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Test> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Tests");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table Test to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table Test to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}