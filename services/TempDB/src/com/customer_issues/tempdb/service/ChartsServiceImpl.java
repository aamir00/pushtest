/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Charts;


/**
 * ServiceImpl object for domain model class Charts.
 *
 * @see Charts
 */
@Service("TempDB.ChartsService")
@Validated
public class ChartsServiceImpl implements ChartsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChartsServiceImpl.class);


    @Autowired
    @Qualifier("TempDB.ChartsDao")
    private WMGenericDao<Charts, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Charts, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Charts create(Charts charts) {
        LOGGER.debug("Creating a new Charts with information: {}", charts);

        Charts chartsCreated = this.wmGenericDao.create(charts);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(chartsCreated);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Charts getById(Integer chartsId) {
        LOGGER.debug("Finding Charts by id: {}", chartsId);
        return this.wmGenericDao.findById(chartsId);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Charts findById(Integer chartsId) {
        LOGGER.debug("Finding Charts by id: {}", chartsId);
        try {
            return this.wmGenericDao.findById(chartsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Charts found with id: {}", chartsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<Charts> findByMultipleIds(List<Integer> chartsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Charts by ids: {}", chartsIds);

        return this.wmGenericDao.findByMultipleIds(chartsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public Charts update(Charts charts) {
        LOGGER.debug("Updating Charts with information: {}", charts);

        this.wmGenericDao.update(charts);
        this.wmGenericDao.refresh(charts);

        return charts;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Charts partialUpdate(Integer chartsId, Map<String, Object>chartsPatch) {
        LOGGER.debug("Partially Updating the Charts with id: {}", chartsId);

        Charts charts = getById(chartsId);

        try {
            ObjectReader chartsReader = this.objectMapper.reader().forType(Charts.class).withValueToUpdate(charts);
            charts = chartsReader.readValue(this.objectMapper.writeValueAsString(chartsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", chartsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        charts = update(charts);

        return charts;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Charts delete(Integer chartsId) {
        LOGGER.debug("Deleting Charts with id: {}", chartsId);
        Charts deleted = this.wmGenericDao.findById(chartsId);
        if (deleted == null) {
            LOGGER.debug("No Charts found with id: {}", chartsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Charts.class.getSimpleName(), chartsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(Charts charts) {
        LOGGER.debug("Deleting Charts with {}", charts);
        this.wmGenericDao.delete(charts);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Charts> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Charts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Charts> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Charts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table Charts to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table Charts to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}