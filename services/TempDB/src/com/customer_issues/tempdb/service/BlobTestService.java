/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.BlobTest;

/**
 * Service object for domain model class {@link BlobTest}.
 */
public interface BlobTestService {

    /**
     * Creates a new BlobTest. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlobTest if any.
     *
     * @param blobTest Details of the BlobTest to be created; value cannot be null.
     * @return The newly created BlobTest.
     */
    BlobTest create(@Valid BlobTest blobTest);


	/**
     * Returns BlobTest by given id if exists.
     *
     * @param blobtestId The id of the BlobTest to get; value cannot be null.
     * @return BlobTest associated with the given blobtestId.
	 * @throws EntityNotFoundException If no BlobTest is found.
     */
    BlobTest getById(Integer blobtestId);

    /**
     * Find and return the BlobTest by given id if exists, returns null otherwise.
     *
     * @param blobtestId The id of the BlobTest to get; value cannot be null.
     * @return BlobTest associated with the given blobtestId.
     */
    BlobTest findById(Integer blobtestId);

	/**
     * Find and return the list of BlobTests by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param blobtestIds The id's of the BlobTest to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return BlobTests associated with the given blobtestIds.
     */
    List<BlobTest> findByMultipleIds(List<Integer> blobtestIds, boolean orderedReturn);


    /**
     * Updates the details of an existing BlobTest. It replaces all fields of the existing BlobTest with the given blobTest.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlobTest if any.
     *
     * @param blobTest The details of the BlobTest to be updated; value cannot be null.
     * @return The updated BlobTest.
     * @throws EntityNotFoundException if no BlobTest is found with given input.
     */
    BlobTest update(@Valid BlobTest blobTest);


    /**
     * Partially updates the details of an existing BlobTest. It updates only the
     * fields of the existing BlobTest which are passed in the blobTestPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlobTest if any.
     *
     * @param blobtestId The id of the BlobTest to be deleted; value cannot be null.
     * @param blobTestPatch The partial data of BlobTest which is supposed to be updated; value cannot be null.
     * @return The updated BlobTest.
     * @throws EntityNotFoundException if no BlobTest is found with given input.
     */
    BlobTest partialUpdate(Integer blobtestId, Map<String, Object> blobTestPatch);

    /**
     * Deletes an existing BlobTest with the given id.
     *
     * @param blobtestId The id of the BlobTest to be deleted; value cannot be null.
     * @return The deleted BlobTest.
     * @throws EntityNotFoundException if no BlobTest found with the given id.
     */
    BlobTest delete(Integer blobtestId);

    /**
     * Deletes an existing BlobTest with the given object.
     *
     * @param blobTest The instance of the BlobTest to be deleted; value cannot be null.
     */
    void delete(BlobTest blobTest);

    /**
     * Find all BlobTests matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BlobTests.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<BlobTest> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all BlobTests matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BlobTests.
     *
     * @see Pageable
     * @see Page
     */
    Page<BlobTest> findAll(String query, Pageable pageable);

    /**
     * Exports all BlobTests matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all BlobTests matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the BlobTests in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the BlobTest.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}