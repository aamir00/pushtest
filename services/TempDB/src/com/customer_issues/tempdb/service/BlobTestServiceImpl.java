/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.BlobTest;


/**
 * ServiceImpl object for domain model class BlobTest.
 *
 * @see BlobTest
 */
@Service("TempDB.BlobTestService")
@Validated
public class BlobTestServiceImpl implements BlobTestService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobTestServiceImpl.class);


    @Autowired
    @Qualifier("TempDB.BlobTestDao")
    private WMGenericDao<BlobTest, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<BlobTest, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public BlobTest create(BlobTest blobTest) {
        LOGGER.debug("Creating a new BlobTest with information: {}", blobTest);

        BlobTest blobTestCreated = this.wmGenericDao.create(blobTest);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(blobTestCreated);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public BlobTest getById(Integer blobtestId) {
        LOGGER.debug("Finding BlobTest by id: {}", blobtestId);
        return this.wmGenericDao.findById(blobtestId);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public BlobTest findById(Integer blobtestId) {
        LOGGER.debug("Finding BlobTest by id: {}", blobtestId);
        try {
            return this.wmGenericDao.findById(blobtestId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No BlobTest found with id: {}", blobtestId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<BlobTest> findByMultipleIds(List<Integer> blobtestIds, boolean orderedReturn) {
        LOGGER.debug("Finding BlobTests by ids: {}", blobtestIds);

        return this.wmGenericDao.findByMultipleIds(blobtestIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public BlobTest update(BlobTest blobTest) {
        LOGGER.debug("Updating BlobTest with information: {}", blobTest);

        this.wmGenericDao.update(blobTest);
        this.wmGenericDao.refresh(blobTest);

        return blobTest;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public BlobTest partialUpdate(Integer blobtestId, Map<String, Object>blobTestPatch) {
        LOGGER.debug("Partially Updating the BlobTest with id: {}", blobtestId);

        BlobTest blobTest = getById(blobtestId);

        try {
            ObjectReader blobTestReader = this.objectMapper.reader().forType(BlobTest.class).withValueToUpdate(blobTest);
            blobTest = blobTestReader.readValue(this.objectMapper.writeValueAsString(blobTestPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", blobTestPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        blobTest = update(blobTest);

        return blobTest;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public BlobTest delete(Integer blobtestId) {
        LOGGER.debug("Deleting BlobTest with id: {}", blobtestId);
        BlobTest deleted = this.wmGenericDao.findById(blobtestId);
        if (deleted == null) {
            LOGGER.debug("No BlobTest found with id: {}", blobtestId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), BlobTest.class.getSimpleName(), blobtestId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(BlobTest blobTest) {
        LOGGER.debug("Deleting BlobTest with {}", blobTest);
        this.wmGenericDao.delete(blobTest);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<BlobTest> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BlobTests");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<BlobTest> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BlobTests");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table BlobTest to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table BlobTest to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}