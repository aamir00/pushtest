/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.UsersTable;

/**
 * Service object for domain model class {@link UsersTable}.
 */
public interface UsersTableService {

    /**
     * Creates a new UsersTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UsersTable if any.
     *
     * @param usersTable Details of the UsersTable to be created; value cannot be null.
     * @return The newly created UsersTable.
     */
    UsersTable create(@Valid UsersTable usersTable);


	/**
     * Returns UsersTable by given id if exists.
     *
     * @param userstableId The id of the UsersTable to get; value cannot be null.
     * @return UsersTable associated with the given userstableId.
	 * @throws EntityNotFoundException If no UsersTable is found.
     */
    UsersTable getById(Integer userstableId);

    /**
     * Find and return the UsersTable by given id if exists, returns null otherwise.
     *
     * @param userstableId The id of the UsersTable to get; value cannot be null.
     * @return UsersTable associated with the given userstableId.
     */
    UsersTable findById(Integer userstableId);

	/**
     * Find and return the list of UsersTables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param userstableIds The id's of the UsersTable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UsersTables associated with the given userstableIds.
     */
    List<UsersTable> findByMultipleIds(List<Integer> userstableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing UsersTable. It replaces all fields of the existing UsersTable with the given usersTable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UsersTable if any.
     *
     * @param usersTable The details of the UsersTable to be updated; value cannot be null.
     * @return The updated UsersTable.
     * @throws EntityNotFoundException if no UsersTable is found with given input.
     */
    UsersTable update(@Valid UsersTable usersTable);


    /**
     * Partially updates the details of an existing UsersTable. It updates only the
     * fields of the existing UsersTable which are passed in the usersTablePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UsersTable if any.
     *
     * @param userstableId The id of the UsersTable to be deleted; value cannot be null.
     * @param usersTablePatch The partial data of UsersTable which is supposed to be updated; value cannot be null.
     * @return The updated UsersTable.
     * @throws EntityNotFoundException if no UsersTable is found with given input.
     */
    UsersTable partialUpdate(Integer userstableId, Map<String, Object> usersTablePatch);

    /**
     * Deletes an existing UsersTable with the given id.
     *
     * @param userstableId The id of the UsersTable to be deleted; value cannot be null.
     * @return The deleted UsersTable.
     * @throws EntityNotFoundException if no UsersTable found with the given id.
     */
    UsersTable delete(Integer userstableId);

    /**
     * Deletes an existing UsersTable with the given object.
     *
     * @param usersTable The instance of the UsersTable to be deleted; value cannot be null.
     */
    void delete(UsersTable usersTable);

    /**
     * Find all UsersTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UsersTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UsersTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UsersTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UsersTables.
     *
     * @see Pageable
     * @see Page
     */
    Page<UsersTable> findAll(String query, Pageable pageable);

    /**
     * Exports all UsersTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UsersTables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UsersTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UsersTable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}