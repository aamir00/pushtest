/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Temp2;


/**
 * ServiceImpl object for domain model class Temp2.
 *
 * @see Temp2
 */
@Service("TempDB.Temp2Service")
@Validated
public class Temp2ServiceImpl implements Temp2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Temp2ServiceImpl.class);


    @Autowired
    @Qualifier("TempDB.Temp2Dao")
    private WMGenericDao<Temp2, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Temp2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp2 create(Temp2 temp2) {
        LOGGER.debug("Creating a new Temp2 with information: {}", temp2);

        Temp2 temp2Created = this.wmGenericDao.create(temp2);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(temp2Created);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Temp2 getById(Integer temp2Id) {
        LOGGER.debug("Finding Temp2 by id: {}", temp2Id);
        return this.wmGenericDao.findById(temp2Id);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Temp2 findById(Integer temp2Id) {
        LOGGER.debug("Finding Temp2 by id: {}", temp2Id);
        try {
            return this.wmGenericDao.findById(temp2Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Temp2 found with id: {}", temp2Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<Temp2> findByMultipleIds(List<Integer> temp2Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Temp2s by ids: {}", temp2Ids);

        return this.wmGenericDao.findByMultipleIds(temp2Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public Temp2 update(Temp2 temp2) {
        LOGGER.debug("Updating Temp2 with information: {}", temp2);

        this.wmGenericDao.update(temp2);
        this.wmGenericDao.refresh(temp2);

        return temp2;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp2 partialUpdate(Integer temp2Id, Map<String, Object>temp2Patch) {
        LOGGER.debug("Partially Updating the Temp2 with id: {}", temp2Id);

        Temp2 temp2 = getById(temp2Id);

        try {
            ObjectReader temp2Reader = this.objectMapper.reader().forType(Temp2.class).withValueToUpdate(temp2);
            temp2 = temp2Reader.readValue(this.objectMapper.writeValueAsString(temp2Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", temp2Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        temp2 = update(temp2);

        return temp2;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp2 delete(Integer temp2Id) {
        LOGGER.debug("Deleting Temp2 with id: {}", temp2Id);
        Temp2 deleted = this.wmGenericDao.findById(temp2Id);
        if (deleted == null) {
            LOGGER.debug("No Temp2 found with id: {}", temp2Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Temp2.class.getSimpleName(), temp2Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(Temp2 temp2) {
        LOGGER.debug("Deleting Temp2 with {}", temp2);
        this.wmGenericDao.delete(temp2);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Temp2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Temp2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table Temp2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table Temp2 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}