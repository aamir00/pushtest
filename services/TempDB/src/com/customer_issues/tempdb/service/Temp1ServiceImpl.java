/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Temp1;
import com.customer_issues.tempdb.Temp2;


/**
 * ServiceImpl object for domain model class Temp1.
 *
 * @see Temp1
 */
@Service("TempDB.Temp1Service")
@Validated
public class Temp1ServiceImpl implements Temp1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Temp1ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TempDB.Temp2Service")
    private Temp2Service temp2Service;

    @Autowired
    @Qualifier("TempDB.Temp1Dao")
    private WMGenericDao<Temp1, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Temp1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp1 create(Temp1 temp1) {
        LOGGER.debug("Creating a new Temp1 with information: {}", temp1);

        Temp1 temp1Created = this.wmGenericDao.create(temp1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(temp1Created);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Temp1 getById(Integer temp1Id) {
        LOGGER.debug("Finding Temp1 by id: {}", temp1Id);
        return this.wmGenericDao.findById(temp1Id);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Temp1 findById(Integer temp1Id) {
        LOGGER.debug("Finding Temp1 by id: {}", temp1Id);
        try {
            return this.wmGenericDao.findById(temp1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Temp1 found with id: {}", temp1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<Temp1> findByMultipleIds(List<Integer> temp1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Temp1s by ids: {}", temp1Ids);

        return this.wmGenericDao.findByMultipleIds(temp1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public Temp1 update(Temp1 temp1) {
        LOGGER.debug("Updating Temp1 with information: {}", temp1);

        this.wmGenericDao.update(temp1);
        this.wmGenericDao.refresh(temp1);

        return temp1;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp1 partialUpdate(Integer temp1Id, Map<String, Object>temp1Patch) {
        LOGGER.debug("Partially Updating the Temp1 with id: {}", temp1Id);

        Temp1 temp1 = getById(temp1Id);

        try {
            ObjectReader temp1Reader = this.objectMapper.reader().forType(Temp1.class).withValueToUpdate(temp1);
            temp1 = temp1Reader.readValue(this.objectMapper.writeValueAsString(temp1Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", temp1Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        temp1 = update(temp1);

        return temp1;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Temp1 delete(Integer temp1Id) {
        LOGGER.debug("Deleting Temp1 with id: {}", temp1Id);
        Temp1 deleted = this.wmGenericDao.findById(temp1Id);
        if (deleted == null) {
            LOGGER.debug("No Temp1 found with id: {}", temp1Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Temp1.class.getSimpleName(), temp1Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(Temp1 temp1) {
        LOGGER.debug("Deleting Temp1 with {}", temp1);
        this.wmGenericDao.delete(temp1);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Temp1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Temp1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table Temp1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table Temp1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Temp2> findAssociatedTemp2s(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated temp2s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("temp1.id = '" + id + "'");

        return temp2Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Temp2Service instance
     */
    protected void setTemp2Service(Temp2Service service) {
        this.temp2Service = service;
    }

}