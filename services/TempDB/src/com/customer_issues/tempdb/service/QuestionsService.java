/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Questions;

/**
 * Service object for domain model class {@link Questions}.
 */
public interface QuestionsService {

    /**
     * Creates a new Questions. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Questions if any.
     *
     * @param questions Details of the Questions to be created; value cannot be null.
     * @return The newly created Questions.
     */
    Questions create(@Valid Questions questions);


	/**
     * Returns Questions by given id if exists.
     *
     * @param questionsId The id of the Questions to get; value cannot be null.
     * @return Questions associated with the given questionsId.
	 * @throws EntityNotFoundException If no Questions is found.
     */
    Questions getById(Integer questionsId);

    /**
     * Find and return the Questions by given id if exists, returns null otherwise.
     *
     * @param questionsId The id of the Questions to get; value cannot be null.
     * @return Questions associated with the given questionsId.
     */
    Questions findById(Integer questionsId);

	/**
     * Find and return the list of Questions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param questionsIds The id's of the Questions to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Questions associated with the given questionsIds.
     */
    List<Questions> findByMultipleIds(List<Integer> questionsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Questions. It replaces all fields of the existing Questions with the given questions.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Questions if any.
     *
     * @param questions The details of the Questions to be updated; value cannot be null.
     * @return The updated Questions.
     * @throws EntityNotFoundException if no Questions is found with given input.
     */
    Questions update(@Valid Questions questions);


    /**
     * Partially updates the details of an existing Questions. It updates only the
     * fields of the existing Questions which are passed in the questionsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Questions if any.
     *
     * @param questionsId The id of the Questions to be deleted; value cannot be null.
     * @param questionsPatch The partial data of Questions which is supposed to be updated; value cannot be null.
     * @return The updated Questions.
     * @throws EntityNotFoundException if no Questions is found with given input.
     */
    Questions partialUpdate(Integer questionsId, Map<String, Object> questionsPatch);

    /**
     * Deletes an existing Questions with the given id.
     *
     * @param questionsId The id of the Questions to be deleted; value cannot be null.
     * @return The deleted Questions.
     * @throws EntityNotFoundException if no Questions found with the given id.
     */
    Questions delete(Integer questionsId);

    /**
     * Deletes an existing Questions with the given object.
     *
     * @param questions The instance of the Questions to be deleted; value cannot be null.
     */
    void delete(Questions questions);

    /**
     * Find all Questions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Questions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Questions> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Questions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Questions.
     *
     * @see Pageable
     * @see Page
     */
    Page<Questions> findAll(String query, Pageable pageable);

    /**
     * Exports all Questions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Questions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Questions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Questions.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}