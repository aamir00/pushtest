/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Charts;

/**
 * Service object for domain model class {@link Charts}.
 */
public interface ChartsService {

    /**
     * Creates a new Charts. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Charts if any.
     *
     * @param charts Details of the Charts to be created; value cannot be null.
     * @return The newly created Charts.
     */
    Charts create(@Valid Charts charts);


	/**
     * Returns Charts by given id if exists.
     *
     * @param chartsId The id of the Charts to get; value cannot be null.
     * @return Charts associated with the given chartsId.
	 * @throws EntityNotFoundException If no Charts is found.
     */
    Charts getById(Integer chartsId);

    /**
     * Find and return the Charts by given id if exists, returns null otherwise.
     *
     * @param chartsId The id of the Charts to get; value cannot be null.
     * @return Charts associated with the given chartsId.
     */
    Charts findById(Integer chartsId);

	/**
     * Find and return the list of Charts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param chartsIds The id's of the Charts to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Charts associated with the given chartsIds.
     */
    List<Charts> findByMultipleIds(List<Integer> chartsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Charts. It replaces all fields of the existing Charts with the given charts.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Charts if any.
     *
     * @param charts The details of the Charts to be updated; value cannot be null.
     * @return The updated Charts.
     * @throws EntityNotFoundException if no Charts is found with given input.
     */
    Charts update(@Valid Charts charts);


    /**
     * Partially updates the details of an existing Charts. It updates only the
     * fields of the existing Charts which are passed in the chartsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Charts if any.
     *
     * @param chartsId The id of the Charts to be deleted; value cannot be null.
     * @param chartsPatch The partial data of Charts which is supposed to be updated; value cannot be null.
     * @return The updated Charts.
     * @throws EntityNotFoundException if no Charts is found with given input.
     */
    Charts partialUpdate(Integer chartsId, Map<String, Object> chartsPatch);

    /**
     * Deletes an existing Charts with the given id.
     *
     * @param chartsId The id of the Charts to be deleted; value cannot be null.
     * @return The deleted Charts.
     * @throws EntityNotFoundException if no Charts found with the given id.
     */
    Charts delete(Integer chartsId);

    /**
     * Deletes an existing Charts with the given object.
     *
     * @param charts The instance of the Charts to be deleted; value cannot be null.
     */
    void delete(Charts charts);

    /**
     * Find all Charts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Charts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Charts> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Charts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Charts.
     *
     * @see Pageable
     * @see Page
     */
    Page<Charts> findAll(String query, Pageable pageable);

    /**
     * Exports all Charts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Charts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Charts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Charts.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}