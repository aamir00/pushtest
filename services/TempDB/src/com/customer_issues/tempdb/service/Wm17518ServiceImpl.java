/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.customer_issues.tempdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.customer_issues.tempdb.Wm17518;


/**
 * ServiceImpl object for domain model class Wm17518.
 *
 * @see Wm17518
 */
@Service("TempDB.Wm17518Service")
@Validated
public class Wm17518ServiceImpl implements Wm17518Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Wm17518ServiceImpl.class);


    @Autowired
    @Qualifier("TempDB.Wm17518Dao")
    private WMGenericDao<Wm17518, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Wm17518, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Wm17518 create(Wm17518 wm17518) {
        LOGGER.debug("Creating a new Wm17518 with information: {}", wm17518);

        Wm17518 wm17518Created = this.wmGenericDao.create(wm17518);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(wm17518Created);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Wm17518 getById(Integer wm17518Id) {
        LOGGER.debug("Finding Wm17518 by id: {}", wm17518Id);
        return this.wmGenericDao.findById(wm17518Id);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Wm17518 findById(Integer wm17518Id) {
        LOGGER.debug("Finding Wm17518 by id: {}", wm17518Id);
        try {
            return this.wmGenericDao.findById(wm17518Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Wm17518 found with id: {}", wm17518Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public List<Wm17518> findByMultipleIds(List<Integer> wm17518Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Wm17518s by ids: {}", wm17518Ids);

        return this.wmGenericDao.findByMultipleIds(wm17518Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TempDBTransactionManager")
    @Override
    public Wm17518 update(Wm17518 wm17518) {
        LOGGER.debug("Updating Wm17518 with information: {}", wm17518);

        this.wmGenericDao.update(wm17518);
        this.wmGenericDao.refresh(wm17518);

        return wm17518;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Wm17518 partialUpdate(Integer wm17518Id, Map<String, Object>wm17518Patch) {
        LOGGER.debug("Partially Updating the Wm17518 with id: {}", wm17518Id);

        Wm17518 wm17518 = getById(wm17518Id);

        try {
            ObjectReader wm17518Reader = this.objectMapper.reader().forType(Wm17518.class).withValueToUpdate(wm17518);
            wm17518 = wm17518Reader.readValue(this.objectMapper.writeValueAsString(wm17518Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", wm17518Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        wm17518 = update(wm17518);

        return wm17518;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public Wm17518 delete(Integer wm17518Id) {
        LOGGER.debug("Deleting Wm17518 with id: {}", wm17518Id);
        Wm17518 deleted = this.wmGenericDao.findById(wm17518Id);
        if (deleted == null) {
            LOGGER.debug("No Wm17518 found with id: {}", wm17518Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Wm17518.class.getSimpleName(), wm17518Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TempDBTransactionManager")
    @Override
    public void delete(Wm17518 wm17518) {
        LOGGER.debug("Deleting Wm17518 with {}", wm17518);
        this.wmGenericDao.delete(wm17518);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Wm17518> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Wm17518s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Wm17518> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Wm17518s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TempDB for table Wm17518 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TempDB for table Wm17518 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TempDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}